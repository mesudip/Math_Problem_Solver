#!/usr/bin/python3
import sys
import math

class Function:
    @staticmethod
    def add(a, b, *args):
        result = 0
        error = False
        for a in args:
            try:
                result = a.__add__(result)
            except Exception as e:
                error = True
        return result

    @staticmethod
    def sub(a, b):
        return a - b

    @staticmethod
    def mul(*args):
        result = 1
        for val in args:
            result *= val
        return result

    @staticmethod
    def div(a, b):
        return a / b

    def __init__(self):
        for method in dir(math):
            if not method[0] == '_':
                setattr(Function, method, getattr(math, method))

    def execute(self, function, *args, **kwargs):
        if callable(function):
            method = function
        try:
            if type(function) is str:
                method = getattr(Function, function)
            if len(args) is not 0:
                if len(kwargs) is not 0:
                    return method(*args, **kwargs)
                else:
                    return method(*args)
            else:
                return function()
        except Exception as e:
            return str(e)

    @staticmethod
    def add_alias(_function, alias_str):
        if callable(_function):
            setattr(Function, alias_str, _function)

        elif callable(alias_str):
            setattr(Function, _function, alias_str)
        else:
            return Exception()

    def add_function(self, function_name, function_formulae, *args):
        '''
        :param function_name:
        :param function_formulae:
        :param args: the unknowns in the function_formulae.
        :return:
        '''

f = Function()

f.add_alias(Function.add, 'addition')
f.add_alias(Function.sub, 'subtraction')
val = f.execute('add', 1, 2, 3, 4)

print(val)
val2=f.execute(*input().split())
print(val2)
